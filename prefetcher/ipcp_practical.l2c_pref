/*
For the Third Data Prefetching Championship - DPC3

Instruction Pointer Classifying Prefetcher - IPCP
Authors: 
Samuel Pakalapati - pakalapatisamuel@gmail.com
Biswabandan Panda - biswap@cse.iitk.ac.in
*/

#include "cache.h"

#define DO_PREF
#define NUM_BLOOM_ENTRIES 4096
#define NUM_IP_TABLE_L2_ENTRIES 1024
#define NUM_IP_INDEX_BITS_L2 10
#define NUM_IP_TAG_BITS_L2 6
#define S_TYPE 1                                            // stream
#define CS_TYPE 2                                           // constant stride
#define CPLX_TYPE 3                                         // complex stride
#define NL_TYPE 4                                           // next line


// #define SIG_DEBUG_PRINT_L2
#ifdef SIG_DEBUG_PRINT_L2
#define SIG_DP(x) x
#else
#define SIG_DP(x)
#endif

class STAT_COLLECT {
  public:
    uint64_t useful;                                    
    uint64_t filled;                                    
    uint64_t misses;
    uint64_t polluted_misses;                                 

    uint8_t bl_filled[NUM_BLOOM_ENTRIES];
    uint8_t bl_request[NUM_BLOOM_ENTRIES];

    STAT_COLLECT () {
        useful = 0;
        filled = 0;
        misses = 0;
        polluted_misses = 0;

        for(int i=0; i<NUM_BLOOM_ENTRIES; i++){
            bl_filled[i] = 0;
            bl_request[i] = 0;
        }
    };
};

class IP_TRACKER {
  public:
    uint64_t ip_tag;
    uint16_t ip_valid;
    uint32_t pref_type;                                     // prefetch class type
    int stride;
    uint64_t page_tag;                                     // last page seen by IP
    uint64_t last_cl_offset;                                // last cl offset in the 4KB page
    uint16_t signature;                                     // CPLX signature                                             // last stride sent by metadata

    IP_TRACKER () {
        ip_tag = 0;
        ip_valid = 0;
        pref_type = 0;
        stride = 0;
        page_tag = 0;
        last_cl_offset = 0;
        signature = 0;
    };
};


class DELTA_PRED_TABLE {
public:
    int delta;
    int conf;

    DELTA_PRED_TABLE () {
        delta = 0;
        conf = 0;
    };        
};


STAT_COLLECT stats_l2[NUM_CPUS][5];     // for GS, CS, CPLX, NL and no class
uint64_t num_misses_l2[NUM_CPUS] = {0};
DELTA_PRED_TABLE DPT_l2[NUM_CPUS][4096];
uint32_t spec_nl_l2[NUM_CPUS] = {0};
IP_TRACKER trackers[NUM_CPUS][NUM_IP_TABLE_L2_ENTRIES];


uint64_t hash_bloom_l2(uint64_t addr){
    uint64_t first_half, sec_half;
    first_half = addr & 0xFFF;
    sec_half = (addr >> 12) & 0xFFF;
 if((first_half ^ sec_half) >= 4096)
     assert(0);
    return ((first_half ^ sec_half) & 0xFFF);
}

int decode_stride(uint32_t metadata){
    int stride=0;
    if(metadata & 0b1000000)
        stride = -1*(metadata & 0b111111);
    else
        stride = metadata & 0b111111;

    return stride;
}

int update_conf_l1(int stride, int pred_stride, int conf){
    if(stride == pred_stride){             // use 2-bit saturating counter for confidence
        conf++;
        if(conf > 3)
            conf = 3;
    } else {
        conf--;
        if(conf < 0)
            conf = 0;
    }

return conf;
}

uint16_t update_sig_l2(uint16_t old_sig, int delta){
    uint16_t new_sig = 0;
    int sig_delta = 0;

// 7-bit sign magnitude form, since we need to track deltas from +63 to -63
    sig_delta = (delta < 0) ? (((-1) * delta) + (1 << 6)) : delta;
    new_sig = ((old_sig << 1) ^ sig_delta) & 0xFFF;                     // 12-bit signature

    return new_sig;
}

uint32_t encode_metadata_l2(int stride, uint16_t type, int spec_nl_l2){

uint32_t metadata = 0;

// first encode stride in the last 8 bits of the metadata
if(stride > 0)
    metadata = stride;
else
    metadata = ((-1*stride) | 0b1000000);

// encode the type of IP in the next 4 bits
metadata = metadata | (type << 8);

// encode the speculative NL bit in the next 1 bit
metadata = metadata | (spec_nl_l2 << 12);

return metadata;

}

void stat_col_L2(uint64_t addr, uint8_t cache_hit, uint8_t cpu, uint64_t ip){
    uint64_t index = hash_bloom_l2(addr);
    int ip_index = ip & ((1 << NUM_IP_INDEX_BITS_L2)-1);
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS_L2) & ((1 << NUM_IP_TAG_BITS_L2)-1);

    for(int i=0; i<5; i++){
        if(cache_hit){
            if(stats_l2[cpu][i].bl_filled[index] == 1){
                stats_l2[cpu][i].useful++;
                stats_l2[cpu][i].filled++;
                stats_l2[cpu][i].bl_filled[index] = 0;
            }
        } else {
            if(ip_tag == trackers[cpu][ip_index].ip_tag){
                if(trackers[cpu][ip_index].pref_type == i)
                    stats_l2[cpu][i].misses++;
                if(stats_l2[cpu][i].bl_filled[index] == 1){
                    stats_l2[cpu][i].polluted_misses++;
                    stats_l2[cpu][i].filled++;
                    stats_l2[cpu][i].bl_filled[index] = 0;
                }
            }
        }

        if(num_misses_l2[cpu] % 1024 == 0){
            for(int j=0; j<NUM_BLOOM_ENTRIES; j++){
                stats_l2[cpu][i].filled += stats_l2[cpu][i].bl_filled[j];
                stats_l2[cpu][i].bl_filled[j] = 0;
                stats_l2[cpu][i].bl_request[j] = 0;
            }
        }
    }
}

void CACHE::l2c_prefetcher_initialize() 
{

}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    uint64_t page = addr >> LOG2_PAGE_SIZE;
    uint64_t curr_tag = (page ^ (page >> 6) ^ (page >> 12)) & ((1<<NUM_IP_TAG_BITS_L2)-1);
    uint64_t cl_offset = (addr >> LOG2_BLOCK_SIZE) & 0x3F;
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    int prefetch_degree = 0;
    int64_t stride = decode_stride(metadata_in);
    uint32_t pref_type = (metadata_in & 0xF00) >> 8;
    uint16_t ip_tag = (ip >> NUM_IP_INDEX_BITS_L2) & ((1 << NUM_IP_TAG_BITS_L2)-1);
    int num_prefs = 0;
    uint16_t signature = 0;
    uint64_t bl_index = 0;
if(NUM_CPUS == 1){
   if (MSHR.occupancy < (1*MSHR.SIZE)/2)
    prefetch_degree = 4;
   else 
    prefetch_degree = 3;  
} else {                                    // tightening the degree for multi-core
    prefetch_degree = 2;
}

stat_col_L2(addr, cache_hit, cpu, ip);
if(cache_hit == 0 && type != PREFETCH)
    num_misses_l2[cpu]++;

// calculate the index bit
int index = ip & ((1 << NUM_IP_INDEX_BITS_L2)-1);
    if(trackers[cpu][index].ip_tag != ip_tag){              // new/conflict IP
        if(trackers[cpu][index].ip_valid == 0){             // if valid bit is zero, update with latest IP info
        trackers[cpu][index].ip_tag = ip_tag;
        trackers[cpu][index].pref_type = pref_type;
        trackers[cpu][index].stride = stride;
        trackers[cpu][index].page_tag = curr_tag;
        trackers[cpu][index].last_cl_offset = cl_offset;
        trackers[cpu][index].signature = 0;
    } else {
        trackers[cpu][index].ip_valid = 0;                  // otherwise, reset valid bit and leave the previous IP as it is
    }

        // issue a next line prefetch upon encountering new IP
        uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;
        #ifdef DO_PREF
        prefetch_line(ip, addr, pf_address, FILL_L2, 0);
        #endif
        SIG_DP(cout << "1, ");
        return metadata_in;
    }
    else {                                                  // if same IP encountered, set valid bit
        trackers[cpu][index].ip_valid = 1;
    }

// update the IP table upon receiving metadata from prefetch
if(type == PREFETCH){
    trackers[cpu][index].pref_type = pref_type;
    trackers[cpu][index].stride = stride;
    spec_nl_l2[cpu] = metadata_in & 0x1000;
}

SIG_DP(
cout << ip << ", " << cache_hit << ", " << cl_addr << ", ";
cout << ", " << stride << "; ";
);

// do not train cplx on prefetch requests
if (type != PREFETCH){
    int64_t stride_cplx = 0;



    if (cl_offset > trackers[cpu][index].last_cl_offset)
        stride_cplx = cl_offset - trackers[cpu][index].last_cl_offset;
    else {
        stride_cplx = trackers[cpu][index].last_cl_offset - cl_offset;
        stride_cplx *= -1;
    }

    // page boundary learning
if(curr_tag != trackers[cpu][index].page_tag){
    if(stride_cplx < 0)
        stride_cplx += 64;
    else
        stride_cplx -= 64;
}

uint16_t last_signature = trackers[cpu][index].signature;
// update complex stride(CPLX) confidence
DPT_l2[cpu][last_signature].conf = update_conf_l1(stride_cplx, DPT_l2[cpu][last_signature].delta, DPT_l2[cpu][last_signature].conf);

// update CPLX only if confidence is zero
if(DPT_l2[cpu][last_signature].conf == 0)
    DPT_l2[cpu][last_signature].delta = stride_cplx;

// calculate and update new signature in IP table
signature = update_sig_l2(last_signature, stride_cplx);
trackers[cpu][index].signature = signature;

// be conservative and do not prefetch at L2 if MPKC is too high
if(stride_cplx == 0)
    return metadata_in;

// cout << ip << ", " << cache_hit << ", " << cl_addr << ", " << addr << ", " << stride_cplx << "; ";
// cout << last_signature<< ", "  << DPT_l2[cpu][last_signature].delta<< ", "  << DPT_l2[cpu][last_signature].conf << "; ";
// cout << endl;
}


        if(DPT_l2[cpu][signature].conf >= 0 && DPT_l2[cpu][signature].delta != 0) {  // if conf>=0, continue looking for delta
        int pref_offset = 0,i=0;                                                        // CPLX IP
        for (i=0; i<prefetch_degree; i++) {
            pref_offset += DPT_l2[cpu][signature].delta;
            uint64_t pf_address = ((cl_addr + pref_offset) << LOG2_BLOCK_SIZE);

            // Check if prefetch address is in same 4 KB page
            if (((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE)) || 
                    (DPT_l2[cpu][signature].conf == -1) ||
                    (DPT_l2[cpu][signature].delta == 0)){
                // if new entry in DPT or delta is zero, break
                break;
            }

            if(DPT_l2[cpu][signature].conf > 0){                                 // prefetch only when conf>0 for CPLX
            // if(spec_nl_l2[cpu] == 1)
                bl_index = hash_bloom_l2(pf_address);
                stats_l2[cpu][CPLX_TYPE].bl_request[bl_index] = 1;
                uint32_t metadata = encode_metadata_l2(0, CPLX_TYPE, spec_nl_l2[cpu]);
                trackers[cpu][index].pref_type = 3;
                #ifdef DO_PREF
                prefetch_line(ip, addr, pf_address, FILL_L2, metadata);
                #endif
                num_prefs++;
                // cout << "here";
                SIG_DP(cout << pref_offset << ", ");
            }
            signature = update_sig_l2(signature, DPT_l2[cpu][signature].delta);
            trackers[cpu][index].pref_type = 3;
        }
    } 

	//Neelu: Removed else if ladder and converted to two ifs.
	 if((trackers[cpu][index].pref_type == 1 || trackers[cpu][index].pref_type == 2) && trackers[cpu][index].stride != 0){      // S or CS class   
            uint32_t metadata = 0;
            if(trackers[cpu][index].pref_type == 1){
                prefetch_degree = prefetch_degree*2;
                metadata = encode_metadata_l2(1, S_TYPE, spec_nl_l2[cpu]);                                // for stream, prefetch with twice the usual degree
            } else{
                metadata = encode_metadata_l2(1, CS_TYPE, spec_nl_l2[cpu]);                                // for stream, prefetch with twice the usual degree
            }

            for (int i=0; i<prefetch_degree; i++) {
                uint64_t pf_address = (cl_addr + (trackers[cpu][index].stride*(i+1))) << LOG2_BLOCK_SIZE;
                
                // Check if prefetch address is in same 4 KB page
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;
                num_prefs++;
                #ifdef DO_PREF
                prefetch_line(ip, addr, pf_address, FILL_L2,metadata);
                #endif
                SIG_DP(cout << trackers[cpu][index].stride << ", ");
            }
        }
    

// if no prefetches are issued till now, speculatively issue a next_line prefetch
if(num_prefs == 0 && spec_nl_l2[cpu] == 1){                                        // NL IP
    uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;  
    bl_index = hash_bloom_l2(pf_address);
    stats_l2[cpu][NL_TYPE].bl_request[bl_index] = 1;
    uint32_t metadata = encode_metadata_l2(1, NL_TYPE, spec_nl_l2[cpu]);
    trackers[cpu][index].pref_type = 3;
    #ifdef DO_PREF
    prefetch_line(ip, addr, pf_address, FILL_L2, metadata);
    #endif
    SIG_DP(cout << "1, ");
}

// update the IP table entries
trackers[cpu][index].last_cl_offset = cl_offset;
trackers[cpu][index].page_tag = curr_tag;

SIG_DP(cout << endl);
return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{

if(prefetch){
uint32_t pref_type = metadata_in & 0xF00;
pref_type = pref_type >> 8;

uint64_t index = hash_bloom_l2(addr);
if(stats_l2[cpu][pref_type].bl_request[index] == 1){
    stats_l2[cpu][pref_type].bl_filled[index] = 1;
    stats_l2[cpu][pref_type].bl_request[index] = 0;
}
}

return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
cout << endl;

uint64_t total_request=0, total_polluted=0, total_useful=0, total_late=0;

/*for(int i=0; i<5; i++){
    total_request += stats_l2[cpu][i].filled; 
    total_polluted += stats_l2[cpu][i].polluted_misses; 
    total_useful += stats_l2[cpu][i].useful; 
    total_late += pref_late[i]; 
}

cout << "CPLX: " << endl;
cout << "pref_filled: " << pref_filled[3] << endl;
cout << "pref_useful: " << pref_useful[3] << endl;
cout << "pref_late: " << pref_late[3] << endl;
cout << "misses: " << stats_l2[cpu][3].misses << endl;
cout << "misses_by_poll: " << stats_l2[cpu][3].polluted_misses << endl;
cout << endl;

cout << "NL_L2: " << endl;
cout << "pref_filled: " << pref_filled[4] << endl;
cout << "pref_useful: " << pref_useful[4] << endl;
cout << "pref_late: " << pref_late[4] << endl;
cout << "misses: " << stats_l2[cpu][4].misses << endl;
cout << "misses_by_poll: " << stats_l2[cpu][4].polluted_misses << endl;
cout << endl;


cout << "total_filled: " << pf_fill << endl;
cout << "total_useful: " << pf_useful << endl;
cout << "total_late: " << total_late << endl;
cout << "total_polluted: " << total_polluted << endl;
cout << "total_misses: " << num_misses_l2[cpu] << endl;
cout << endl;*/
}
